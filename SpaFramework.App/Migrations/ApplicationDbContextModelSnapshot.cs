// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpaFramework.App.DAL;

namespace SpaFramework.App.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("IdentityUserRole<long>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SpaFramework.App.Models.Data.Accounts.ApplicationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 100L,
                            ConcurrencyStamp = "822fa772-fdee-4337-ba10-148de02aead2",
                            Name = "SuperAdmin",
                            NormalizedName = "SuperAdmin"
                        },
                        new
                        {
                            Id = 101L,
                            ConcurrencyStamp = "9489b5ca-2ccc-4557-8b5c-e9ede7c53abb",
                            Name = "ProjectManager",
                            NormalizedName = "ProjectManager"
                        },
                        new
                        {
                            Id = 102L,
                            ConcurrencyStamp = "8918c267-4c12-410b-b1f3-90b2c77047e7",
                            Name = "ProjectViewer",
                            NormalizedName = "ProjectViewer"
                        },
                        new
                        {
                            Id = 103L,
                            ConcurrencyStamp = "bd945565-9f4b-44f4-b27a-15d6a524e4b9",
                            Name = "ContentManager",
                            NormalizedName = "ContentManager"
                        });
                });

            modelBuilder.Entity("SpaFramework.App.Models.Data.Accounts.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 101L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f618bc0-0e5b-4893-a879-395b6e8705a6",
                            Email = "admin@test.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@TEST.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEA6ByhUS/0W17yEwgwP7jvD2tmNrCnaSApJGET4vFakdHYf5W4ZuwfuLrwfNBKdnDw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 102L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "12187026-4943-4268-9ca7-746b45d2716d",
                            Email = "chris.wilson@northwoodsoft.com",
                            EmailConfirmed = true,
                            FirstName = "Chris",
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHRIS.WILSON@NORTHWOODSOFT.COM",
                            NormalizedUserName = "CHRIS.WILSON@NORTHWOODSOFT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDe3H7YGlcSpzkcI+od0Of1cQA/v6bXkOPorBBo32tUpSfgRWXPkJdgkCqxpHr495A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "chris.wilson@northwoodsoft.com"
                        },
                        new
                        {
                            Id = 103L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e066526-70da-4a43-a7c2-1e3d3ce247c6",
                            Email = "john.doe@test.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.DOE@TEST.COM",
                            NormalizedUserName = "JOHN.DOE@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHjcQK0MnumT/ZYxACBfxgZM31+6v8rwRlGIf9l014ThVucKD42dAN9UojFi9raYqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "john.doe@test.com"
                        },
                        new
                        {
                            Id = 104L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f809a332-f0af-4d3a-a38a-65a8ce62d86d",
                            Email = "jane.smith@test.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE.SMITH@TEST.COM",
                            NormalizedUserName = "JANE.SMITH@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECpEkoWjdgvf5aO56Ux2cLv0hORkN9zJcrEahm8qj+yNZMcE+YNtrJcKhU0o9/Cpwg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "jane.smith@test.com"
                        },
                        new
                        {
                            Id = 105L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c81a56bd-e812-4daa-9dce-64ce2d166f09",
                            Email = "jorge.garcia@test.com",
                            EmailConfirmed = true,
                            FirstName = "Jorge",
                            LastName = "Garcia",
                            LockoutEnabled = false,
                            NormalizedEmail = "JORGE.GARCIA@TEST.COM",
                            NormalizedUserName = "JORGE.GARCIA@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAudx+Ec2S0h9RG4ysihfv75zz4ZOFIHd790m4PlGkqooTTq9Ui11LOmKNXyWkK3zw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "jorge.garcia@test.com"
                        });
                });

            modelBuilder.Entity("SpaFramework.App.Models.Data.Accounts.ApplicationUserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 101L,
                            RoleId = 100L,
                            Id = 0L
                        },
                        new
                        {
                            UserId = 101L,
                            RoleId = 101L,
                            Id = 0L
                        },
                        new
                        {
                            UserId = 101L,
                            RoleId = 102L,
                            Id = 0L
                        },
                        new
                        {
                            UserId = 101L,
                            RoleId = 103L,
                            Id = 0L
                        },
                        new
                        {
                            UserId = 102L,
                            RoleId = 100L,
                            Id = 0L
                        },
                        new
                        {
                            UserId = 102L,
                            RoleId = 101L,
                            Id = 0L
                        },
                        new
                        {
                            UserId = 102L,
                            RoleId = 102L,
                            Id = 0L
                        },
                        new
                        {
                            UserId = 102L,
                            RoleId = 103L,
                            Id = 0L
                        },
                        new
                        {
                            UserId = 103L,
                            RoleId = 101L,
                            Id = 0L
                        },
                        new
                        {
                            UserId = 103L,
                            RoleId = 102L,
                            Id = 0L
                        },
                        new
                        {
                            UserId = 104L,
                            RoleId = 102L,
                            Id = 0L
                        },
                        new
                        {
                            UserId = 105L,
                            RoleId = 103L,
                            Id = 0L
                        });
                });

            modelBuilder.Entity("SpaFramework.App.Models.Data.Accounts.ExternalCredential", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("ApplicationUserId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("ConcurrencyTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Provider")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ExternalCredentials");
                });

            modelBuilder.Entity("SpaFramework.App.Models.Data.Clients.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte[]>("ConcurrencyTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Abbreviation");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 100L,
                            Abbreviation = "ACME",
                            Deleted = false,
                            LastModification = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Acme, Inc."
                        },
                        new
                        {
                            Id = 101L,
                            Abbreviation = "NWS",
                            Deleted = false,
                            LastModification = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Northwoods"
                        });
                });

            modelBuilder.Entity("SpaFramework.App.Models.Data.Clients.ClientStats", b =>
                {
                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FirstStartDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("LastEndDate")
                        .HasColumnType("date");

                    b.Property<int>("NumberOfProjects")
                        .HasColumnType("int");

                    b.HasKey("ClientId");

                    b.ToView("ClientStats");
                });

            modelBuilder.Entity("SpaFramework.App.Models.Data.Clients.ClientTrackedChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("ApplicationUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("EntityId");

                    b.ToTable("ClientsTrackedChanges");
                });

            modelBuilder.Entity("SpaFramework.App.Models.Data.Clients.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("ConcurrencyTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("LastModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 100L,
                            ClientId = 100L,
                            Deleted = false,
                            EndDate = new DateTime(2022, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModification = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Operation Purple Midnight",
                            StartDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = 1
                        },
                        new
                        {
                            Id = 101L,
                            ClientId = 101L,
                            Deleted = false,
                            EndDate = new DateTime(2019, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModification = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Rapidest",
                            StartDate = new DateTime(2016, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = 3
                        },
                        new
                        {
                            Id = 102L,
                            ClientId = 101L,
                            Deleted = false,
                            EndDate = new DateTime(2021, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModification = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Rapidester",
                            StartDate = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = 2
                        },
                        new
                        {
                            Id = 103L,
                            ClientId = 101L,
                            Deleted = false,
                            EndDate = new DateTime(2022, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModification = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Rapidesterester",
                            StartDate = new DateTime(2021, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = 1
                        });
                });

            modelBuilder.Entity("SpaFramework.App.Models.Data.Clients.ProjectTrackedChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("ApplicationUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("EntityId");

                    b.ToTable("ProjectsTrackedChanges");
                });

            modelBuilder.Entity("SpaFramework.App.Models.Data.Content.ContentBlock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("AllowedTokens")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ConcurrencyTimestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPage")
                        .HasColumnType("bit");

                    b.Property<string>("Slug")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Slug");

                    b.ToTable("ContentBlocks");

                    b.HasData(
                        new
                        {
                            Id = 100L,
                            AllowedTokens = "[{\"Token\":\"passwordResetUrl\",\"Description\":\"The URL for the user to reset their password\"}]",
                            Description = "The text that appears in a password reset message",
                            IsPage = false,
                            Slug = "password-reset-email",
                            Title = "Reset Your Password",
                            Value = "To reset your account, follow this link: %passwordResetUrl%"
                        },
                        new
                        {
                            Id = 101L,
                            Description = "The text that appears on the About page",
                            IsPage = true,
                            Slug = "about",
                            Title = "About Us",
                            Value = "About us..."
                        },
                        new
                        {
                            Id = 102L,
                            Description = "",
                            IsPage = true,
                            Slug = "placeholder",
                            Title = "Placeholder",
                            Value = "This is a placeholder page. The underlying functionality has not yet been implemented."
                        },
                        new
                        {
                            Id = 103L,
                            Description = "Content that appears on the Home/Dashboard page",
                            IsPage = false,
                            Slug = "dashboard",
                            Title = "Hello",
                            Value = "Hello, world. Or whoever else is here. This content is editable within the app."
                        },
                        new
                        {
                            Id = 104L,
                            Description = "The help page that appears in the top nav",
                            IsPage = true,
                            Slug = "help",
                            Title = "Help!",
                            Value = "Need help? Don't we all."
                        });
                });

            modelBuilder.Entity("SpaFramework.App.Models.Data.Jobs.Job", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Ended")
                        .HasColumnType("datetime2");

                    b.Property<long>("ExpectedCount")
                        .HasColumnType("bigint");

                    b.Property<long>("FailureCount")
                        .HasColumnType("bigint");

                    b.Property<string>("ItemType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SerializedItemIds")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ItemIds");

                    b.Property<DateTime?>("Started")
                        .HasColumnType("datetime2");

                    b.Property<long>("SuccessCount")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Created");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("SpaFramework.App.Models.Data.Jobs.JobItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("SpaFramework.App.Models.Data.Accounts.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("SpaFramework.App.Models.Data.Accounts.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("SpaFramework.App.Models.Data.Accounts.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("SpaFramework.App.Models.Data.Accounts.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpaFramework.App.Models.Data.Accounts.ApplicationUserRole", b =>
                {
                    b.HasOne("SpaFramework.App.Models.Data.Accounts.ApplicationRole", "ApplicationRole")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpaFramework.App.Models.Data.Accounts.ApplicationUser", "ApplicationUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationRole");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("SpaFramework.App.Models.Data.Accounts.ExternalCredential", b =>
                {
                    b.HasOne("SpaFramework.App.Models.Data.Accounts.ApplicationUser", "ApplicationUser")
                        .WithMany("ExternalCredentials")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("SpaFramework.App.Models.Data.Clients.ClientStats", b =>
                {
                    b.HasOne("SpaFramework.App.Models.Data.Clients.Client", "Client")
                        .WithOne("ClientStats")
                        .HasForeignKey("SpaFramework.App.Models.Data.Clients.ClientStats", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("SpaFramework.App.Models.Data.Clients.ClientTrackedChange", b =>
                {
                    b.HasOne("SpaFramework.App.Models.Data.Accounts.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("SpaFramework.App.Models.Data.Clients.Client", "Entity")
                        .WithMany("TrackedChanges")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("SpaFramework.App.Models.Data.Clients.Project", b =>
                {
                    b.HasOne("SpaFramework.App.Models.Data.Clients.Client", "Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("SpaFramework.App.Models.Data.Clients.ProjectTrackedChange", b =>
                {
                    b.HasOne("SpaFramework.App.Models.Data.Accounts.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("SpaFramework.App.Models.Data.Clients.Project", "Entity")
                        .WithMany("TrackedChanges")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("SpaFramework.App.Models.Data.Jobs.JobItem", b =>
                {
                    b.HasOne("SpaFramework.App.Models.Data.Jobs.Job", "Job")
                        .WithMany("JobItems")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("SpaFramework.App.Models.Data.Accounts.ApplicationRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SpaFramework.App.Models.Data.Accounts.ApplicationUser", b =>
                {
                    b.Navigation("ExternalCredentials");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("SpaFramework.App.Models.Data.Clients.Client", b =>
                {
                    b.Navigation("ClientStats");

                    b.Navigation("Projects");

                    b.Navigation("TrackedChanges");
                });

            modelBuilder.Entity("SpaFramework.App.Models.Data.Clients.Project", b =>
                {
                    b.Navigation("TrackedChanges");
                });

            modelBuilder.Entity("SpaFramework.App.Models.Data.Jobs.Job", b =>
                {
                    b.Navigation("JobItems");
                });
#pragma warning restore 612, 618
        }
    }
}
